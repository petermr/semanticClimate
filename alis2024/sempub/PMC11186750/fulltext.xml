<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN" "JATS-archivearticle1-3-mathml3.dtd"> 
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3"><?properties open_access?><?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName A++V2.4.dtd?><?SourceDTD.Version 2.4?><?ConverterInfo.XSLTName springer2nlmx2.xsl?><?ConverterInfo.Version 1?><processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats"><restricted-by>pmc</restricted-by></processing-meta><front><journal-meta><journal-id journal-id-type="nlm-ta">Nature</journal-id><journal-id journal-id-type="iso-abbrev">Nature</journal-id><journal-title-group><journal-title>Nature</journal-title></journal-title-group><issn pub-type="ppub">0028-0836</issn><issn pub-type="epub">1476-4687</issn><publisher><publisher-name>Nature Publishing Group UK</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta>
<article-meta><article-id pub-id-type="pmcid">11186750</article-id><article-id pub-id-type="pmid">38898292</article-id>
<article-id pub-id-type="publisher-id">7421</article-id><article-id pub-id-type="doi">10.1038/s41586-024-07421-0</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>Detecting hallucinations in large language models using semantic entropy</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" equal-contrib="yes"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-9185-6415</contrib-id><name><surname>Farquhar</surname><given-names>Sebastian</given-names></name><address><email>sebfar@gmail.com</email></address><xref ref-type="aff" rid="Aff1"/></contrib><contrib contrib-type="author" equal-contrib="yes"><name><surname>Kossen</surname><given-names>Jannik</given-names></name><xref ref-type="aff" rid="Aff1"/></contrib><contrib contrib-type="author" equal-contrib="yes"><name><surname>Kuhn</surname><given-names>Lorenz</given-names></name><xref ref-type="aff" rid="Aff1"/></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2733-2078</contrib-id><name><surname>Gal</surname><given-names>Yarin</given-names></name><xref ref-type="aff" rid="Aff1"/></contrib><aff id="Aff1"><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/052gg0110</institution-id><institution-id institution-id-type="GRID">grid.4991.5</institution-id><institution-id institution-id-type="ISNI">0000 0004 1936 8948</institution-id><institution>OATML, Department of Computer Science, </institution><institution>University of Oxford, </institution></institution-wrap>Oxford, UK </aff></contrib-group><pub-date pub-type="epub"><day>19</day><month>6</month><year>2024</year></pub-date><pub-date pub-type="pmc-release"><day>19</day><month>6</month><year>2024</year></pub-date><pub-date pub-type="ppub"><year>2024</year></pub-date><volume>630</volume><issue>8017</issue><fpage>625</fpage><lpage>630</lpage><history><date date-type="received"><day>17</day><month>7</month><year>2023</year></date><date date-type="accepted"><day>12</day><month>4</month><year>2024</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s) 2024</copyright-statement><license><ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article&#x02019;s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article&#x02019;s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p></license></permissions><abstract id="Abs1"><p id="Par1">Large language model (LLM) systems, such as ChatGPT<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> or Gemini<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, can show impressive reasoning and question-answering capabilities but often &#x02018;hallucinate&#x02019; false outputs and unsubstantiated answers<sup><xref ref-type="bibr" rid="CR3">3</xref>,<xref ref-type="bibr" rid="CR4">4</xref></sup>. Answering unreliably or without the necessary information prevents adoption in diverse fields, with problems including fabrication of legal precedents<sup><xref ref-type="bibr" rid="CR5">5</xref></sup> or untrue facts in news articles<sup><xref ref-type="bibr" rid="CR6">6</xref></sup> and even posing a risk to human life in medical domains such as radiology<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. Encouraging truthfulness through supervision or reinforcement has&#x000a0;been only partially successful<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>. Researchers need a general method for detecting hallucinations in LLMs that works even with new and unseen questions to which humans might not know the answer. Here we develop new methods grounded in statistics, proposing entropy-based uncertainty estimators for LLMs to detect a subset of hallucinations&#x02014;confabulations&#x02014;which are arbitrary and incorrect generations. Our method addresses the fact that one idea can be expressed in many ways by computing uncertainty at the level of meaning rather than specific sequences of words. Our method works across datasets and tasks without a priori knowledge of the task, requires no task-specific data and robustly generalizes to new tasks not seen before. By detecting when a prompt is likely to produce a confabulation, our method helps users understand when they must take extra care with LLMs and opens up new possibilities for using LLMs that are otherwise prevented by their unreliability.</p></abstract><abstract id="Abs2" abstract-type="web-summary"><p id="Par2">Hallucinations (confabulations) in large language model systems can be tackled by measuring uncertainty about the meanings of generated responses rather than the text itself&#x000a0;to improve question-answering accuracy.</p></abstract><kwd-group kwd-group-type="npg-subject"><title>Subject terms</title><kwd>Computer science</kwd><kwd>Information technology</kwd></kwd-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; Springer Nature Limited 2024</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Main</title><p id="Par3">&#x02018;Hallucinations&#x02019; are a critical problem<sup><xref ref-type="bibr" rid="CR9">9</xref></sup> for natural language generation systems using large language models (LLMs), such as ChatGPT<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> or Gemini<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, because users cannot trust that any given output is correct.</p><p id="Par4">Hallucinations are often defined as LLMs generating &#x0201c;content that is nonsensical or unfaithful to the provided source content&#x0201d;<sup><xref ref-type="bibr" rid="CR9">9</xref>&#x02013;<xref ref-type="bibr" rid="CR11">11</xref></sup> but they have come to include a vast array of failures of faithfulness and factuality. We focus on a subset of hallucinations which we call &#x02018;confabulations&#x02019;<sup><xref ref-type="bibr" rid="CR12">12</xref></sup> for which LLMs fluently make claims that are both wrong and arbitrary&#x02014;by which we mean that the answer is sensitive to irrelevant details such as random seed. For example, when asked a medical question &#x0201c;What is the target of Sotorasib?&#x0201d; an LLM confabulates by sometimes answering KRASG12&#x000a0;&#x02018;C&#x02019; (correct) and other times KRASG12&#x000a0;&#x02018;D&#x02019; (incorrect) despite identical instructions. We distinguish this from cases in which a similar &#x02018;symptom&#x02019; is caused by the following different mechanisms: when LLMs are consistently wrong as a result of being trained on erroneous data such as common misconceptions<sup><xref ref-type="bibr" rid="CR13">13</xref></sup>; when the LLM &#x02018;lies&#x02019; in pursuit of a reward<sup><xref ref-type="bibr" rid="CR14">14</xref></sup>; or systematic failures of reasoning or generalization. We believe that combining these distinct mechanisms in the broad category hallucination is unhelpful. Our method makes progress on a portion of the problem of providing scalable oversight<sup><xref ref-type="bibr" rid="CR15">15</xref></sup> by detecting confabulations that people might otherwise find plausible. However, it does not guarantee factuality because it does not help when LLM outputs are systematically bad. Nevertheless, we significantly improve question-answering accuracy for state-of-the-art LLMs, revealing that confabulations are a great source of error at present.</p><p id="Par5">We show how to detect confabulations by developing a quantitative measure of when an input is likely to cause an LLM to generate arbitrary and ungrounded answers. Detecting confabulations allows systems built on LLMs to avoid answering questions likely to cause confabulations, to make users aware of the unreliability of answers to a question or to supplement the LLM with more grounded search or retrieval. This is essential for the critical emerging field of free-form generation in which naive approaches, suited to closed vocabulary and multiple choice, fail. Past work on uncertainty for LLMs has focused on simpler settings, such as classifiers<sup><xref ref-type="bibr" rid="CR16">16</xref>,<xref ref-type="bibr" rid="CR17">17</xref></sup> and regressors<sup><xref ref-type="bibr" rid="CR18">18</xref>,<xref ref-type="bibr" rid="CR19">19</xref></sup>, whereas the most exciting applications of LLMs relate to free-form generations.</p><p id="Par6">The term hallucination in the context of machine learning originally comes from filling in ungrounded details, either as a deliberate strategy<sup><xref ref-type="bibr" rid="CR20">20</xref></sup> or as a reliability problem<sup><xref ref-type="bibr" rid="CR4">4</xref></sup>. The appropriateness of the metaphor has been questioned as promoting undue anthropomorphism<sup><xref ref-type="bibr" rid="CR21">21</xref></sup>. Although we agree that metaphor must be used carefully with LLMs<sup><xref ref-type="bibr" rid="CR22">22</xref></sup>, the widespread adoption of the term hallucination reflects the fact that it points to an important phenomenon. This work represents a step towards making that phenomenon more precise.</p><p id="Par7">To detect confabulations, we use probabilistic tools to define and then measure the &#x02018;semantic&#x02019; entropy of the generations of an LLM&#x02014;an entropy that is computed over meanings of sentences. High entropy corresponds to high uncertainty<sup><xref ref-type="bibr" rid="CR23">23</xref>&#x02013;<xref ref-type="bibr" rid="CR25">25</xref></sup>&#x02014;so semantic entropy is one way to estimate semantic uncertainties. Semantic uncertainty, the broader category of measures we introduce, could be operationalized with other measures of uncertainty, such as mutual information, instead. Entropy in free-form generation is normally hard to measure because answers might mean the same thing (be semantically equivalent) despite being expressed differently (being syntactically or lexically distinct). This causes naive estimates of entropy or other lexical variation scores<sup><xref ref-type="bibr" rid="CR26">26</xref></sup> to be misleadingly high when the same correct answer might be written in many ways without changing its meaning.</p><p id="Par8">By contrast, our semantic entropy moves towards estimating the entropy of the distribution of meanings of free-form answers to questions, insofar as that is possible, rather than the distribution over the &#x02018;tokens&#x02019; (words or word-pieces) which LLMs natively represent. This can be seen as a kind of semantic consistency check<sup><xref ref-type="bibr" rid="CR27">27</xref></sup> for random seed variation. An overview of our approach is provided in Fig. <xref rid="Fig1" ref-type="fig">1</xref> and a worked example in Supplementary Table <xref rid="MOESM1" ref-type="media">1</xref>.<fig id="Fig1"><label>Fig. 1</label><caption><title>Overview of semantic entropy and confabulation detection.</title><p><bold>a</bold>, Naive entropy-based uncertainty measures variation in the exact answers, treating &#x02018;Paris&#x02019;, &#x02018;It&#x02019;s Paris&#x02019; and &#x02018;France&#x02019;s capital Paris&#x02019; as different. But this is unsuitable for language tasks for which sometimes different answers mean the same things. Our semantic entropy clusters answers which share meanings before computing the entropy. A low semantic entropy shows that the LLM is confident about the meaning. <bold>b</bold>, Semantic entropy can also detect confabulations in longer passages. We automatically decompose a long generated answer into factoids. For each factoid, an LLM generates questions to which that factoid might have been the answer. The original LLM then samples&#x000a0;<italic>M</italic> possible answers to these questions. Finally, we compute the semantic entropy over the answers to each specific question, including the original factoid. Confabulations are indicated by high average semantic entropy for questions associated with that factoid. Here, semantic entropy classifies Fact 1 as probably not a confabulation because generations often mean the same thing, despite very different wordings, which a naive entropy would have missed.</p></caption><graphic xlink:href="41586_2024_7421_Fig1_HTML" id="d33e315"/></fig></p><p id="Par9">Intuitively, our method works by sampling several possible answers to each question and clustering them algorithmically into answers that have similar meanings, which we determine on the basis of whether answers in the same cluster entail each other bidirectionally<sup><xref ref-type="bibr" rid="CR28">28</xref></sup>. That is, if sentence A entails that sentence B is true and vice versa, then we consider them to be in the same semantic cluster. We measure entailment using both general-purpose LLMs and natural language inference (NLI) tools developed specifically for detecting entailment for which we show direct evaluations in Supplementary Tables <xref rid="MOESM1" ref-type="media">2</xref> and <xref rid="MOESM1" ref-type="media">3</xref> and Supplementary Fig. <xref rid="MOESM1" ref-type="media">1</xref>. Textual entailment has previously been shown to correlate with faithfulness<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> in the context of factual consistency<sup><xref ref-type="bibr" rid="CR29">29</xref></sup> as well as being used to measure factuality in abstractive summarization<sup><xref ref-type="bibr" rid="CR30">30</xref></sup>, especially when applied at the right granularity<sup><xref ref-type="bibr" rid="CR31">31</xref></sup>.</p><p id="Par10">Semantic entropy detects confabulations in free-form text generation across a range of language models and domains, without previous domain knowledge. Our evaluations cover question answering in trivia knowledge (TriviaQA<sup><xref ref-type="bibr" rid="CR32">32</xref></sup>), general knowledge (SQuAD 1.1; ref. <sup><xref ref-type="bibr" rid="CR33">33</xref></sup>), life sciences (BioASQ<sup><xref ref-type="bibr" rid="CR34">34</xref></sup>) and open-domain natural questions (NQ-Open<sup><xref ref-type="bibr" rid="CR35">35</xref></sup>) derived from actual queries to Google Search<sup><xref ref-type="bibr" rid="CR36">36</xref></sup>. In addition, semantic entropy detects confabulations in mathematical word problems (SVAMP<sup><xref ref-type="bibr" rid="CR37">37</xref></sup>) and in a biography-generation dataset, FactualBio, accompanying this paper.</p><p id="Par11">Our results for TriviaQA, SQuAD, BioASQ, NQ-Open and SVAMP are all evaluated context-free and involve sentence-length answers (96&#x02009;&#x000b1;&#x02009;70 characters, mean&#x02009;&#x000b1;&#x02009;s.d.) and use LLaMA 2 Chat (7B, 13B and 70B parameters)<sup><xref ref-type="bibr" rid="CR38">38</xref></sup>, Falcon Instruct (7B and 40B)<sup><xref ref-type="bibr" rid="CR39">39</xref></sup> and Mistral Instruct (7B)<sup><xref ref-type="bibr" rid="CR40">40</xref></sup>. In the <xref rid="MOESM1" ref-type="media">Supplementary Information</xref>, we further consider short-phrase-length answers. Results for FactualBio (442&#x02009;&#x000b1;&#x02009;122 characters) use GPT-4 (ref. <sup><xref ref-type="bibr" rid="CR1">1</xref></sup>). At the time of writing, GPT-4 (ref. <sup><xref ref-type="bibr" rid="CR1">1</xref></sup>) did not expose output probabilities<sup><xref ref-type="bibr" rid="CR41">41</xref></sup> or hidden states, although it does now. As a result, we propose a discrete approximation of our estimator for semantic entropy which allows us to run experiments without access to output probabilities, which we use for all GPT-4 results in this paper and which performs similarly well.</p><p id="Par12">Our confabulation detection with semantic entropy is more robust to user inputs from previously unseen domains than methods which aim to &#x02018;learn&#x02019; how to detect confabulations from a set of example demonstrations. Our method is unsupervised, meaning that we do not need labelled examples of confabulations. By contrast, supervised methods detect confabulations by learning patterns behind examples of confabulations, assuming that future questions preserve these patterns. But this assumption is often untrue in new situations or with confabulations that human overseers are unable to identify (compare Fig. 17 of ref. <sup><xref ref-type="bibr" rid="CR24">24</xref></sup>). As a strong supervised baseline, we compare to an embedding regression method inspired by ref. <sup><xref ref-type="bibr" rid="CR24">24</xref></sup> which trains a logistic regression classifier to predict whether the model correctly answered a question on the basis of the final &#x02018;embedding&#x02019; (hidden state) of the LLM. We also use the <italic>P</italic>(True) method<sup><xref ref-type="bibr" rid="CR24">24</xref></sup> which looks at the probability with which an LLM predicts that the next token is &#x02018;True&#x02019; when few-shot prompted to compare a main answer with &#x02018;brainstormed&#x02019; alternatives.</p><p id="Par13">Confabulations contribute&#x000a0;substantially to incorrect answers given by language models. We show that semantic entropy can be used to predict many incorrect model answers and to improve question-answering accuracy by refusing to answer those questions the model is uncertain about. Corresponding to these two uses, we evaluate two main metrics. First, the widely used area under the receiver operating characteristic (AUROC) curve for the binary event that a given answer is incorrect. This measure captures both precision and recall and ranges from 0 to 1, with 1 representing a perfect classifier and 0.5 representing an un-informative classifier. We also show a new measure, the area under the &#x02018;rejection accuracy&#x02019; curve (AURAC). This studies the case in which the confabulation detection score is used to refuse to answer the questions judged most likely to cause confabulations. Rejection accuracy is the accuracy of the answers of the model on the remaining questions and the area under this curve is a summary statistic over many thresholds (representative threshold accuracies are provided in <xref rid="MOESM1" ref-type="media">Supplementary Material</xref>). The AURAC captures the accuracy improvement which users would experience if semantic entropy was used to filter out questions causing the highest entropy.</p></sec><sec id="Sec2"><title>Detecting confabulations in QA and math</title><p id="Par14">In Fig. <xref rid="Fig2" ref-type="fig">2</xref>, we show that both semantic entropy and its discrete approximation outperform our best baselines for sentence-length generations. These results are averaged across datasets and provide the actual scores on the held-out evaluation dataset. We report the raw average score across held-out evaluation datasets without standard error because the distributional characteristics are more a property of the models and datasets selected than the method. Consistency of relative results across different datasets is a stronger indicator of variation in this case.<fig id="Fig2"><label>Fig. 2</label><caption><title>Detecting confabulations in sentence-length generations.</title><p>Semantic entropy outperforms leading baselines and naive entropy. AUROC (scored on the <italic>y</italic>-axes)&#x000a0;measures how well methods predict LLM mistakes, which correlate with confabulations. AURAC (likewise scored on the <italic>y</italic>-axes)&#x000a0;measures the performance improvement of a system that refuses to answer questions which are judged likely to cause confabulations. Results are an average over five datasets, with individual metrics provided in the <xref rid="MOESM1" ref-type="media">Supplementary Information</xref>.</p></caption><graphic xlink:href="41586_2024_7421_Fig2_HTML" id="d33e452"/></fig></p><p id="Par15">Semantic entropy greatly outperforms the naive estimation of uncertainty using entropy: computing the entropy of the length-normalized joint probability of the token sequences. Naive entropy estimation ignores the fact that token probabilities also express the uncertainty of the model over phrasings that do not change the meaning of an output.</p><p id="Par16">Our methods also outperform the supervised embedding regression method both in- and out-of-distribution. In pale-yellow&#x000a0;bars we show that embedding regression performance deteriorates when its training data do not match the deployment distribution&#x02014;which mirrors the common real-world case in which there is a distribution shift between training and deployment<sup><xref ref-type="bibr" rid="CR42">42</xref></sup>&#x02014;the plotted value is the average metric for embedding regression trained on one of the four &#x02018;off-distribution&#x02019; datasets for that evaluation. This is critical because reliable uncertainty is most important when the data distribution shifts. Semantic entropy also outperforms <italic>P</italic>(True) which is supervised &#x02018;in-context&#x02019;; that is, it is adapted to the deployment task with a few training examples provided in the LLM prompt itself. The discrete variant of semantic entropy performs similarly to our standard estimator, despite not requiring exact output probabilities.</p><p id="Par17">Averaged across the 30 combinations of tasks and models we study, semantic entropy achieves the best AUROC value of 0.790 whereas naive entropy (0.691), <italic>P</italic>(True) (0.698) and the embedding regression baseline (0.687) lag behind it. Semantic entropy performs well consistently, with stable performance (between 0.78 and 0.81 AUROC) across the different model families (LLaMA, Falcon and Mistral) and scales (from 7B to 70B parameters) which we study (we report summary statistics for each dataset and model as before). Although semantic entropy outperforms the baselines across all model sizes, <italic>P</italic>(True) seems to improve with model size, suggesting that it might become more competitive for very capable honest models in settings that the model understands well (which are, however, not the most important cases to have good uncertainty). We use ten generations to compute entropy, selected using analysis in Supplementary Fig. <xref rid="MOESM1" ref-type="media">2</xref>. Further results for short-phrase generations are described in Supplementary Figs. <xref rid="MOESM1" ref-type="media">7</xref>&#x02013;<xref rid="MOESM1" ref-type="media">10</xref>.</p><p id="Par18">The results in Fig. <xref rid="Fig2" ref-type="fig">2</xref> offer a lower bound on the effectiveness of semantic entropy at detecting confabulations. These evaluations determine whether semantic entropy and baseline methods can detect when the answers of the model are incorrect (which we validate against human correctness evaluations in Supplementary Table <xref rid="MOESM1" ref-type="media">4</xref>). In addition to errors from confabulations (arbitrary incorrectness), this also includes other types of mistakes for which semantic entropy is not suited, such as consistent errors learned from the training data. The fact that methods such as embedding regression are able to spot other kinds of errors, not just confabulations, but still are outperformed by semantic entropy, suggests that confabulations are a principal category of errors for actual generations.</p><p id="Par19">Examples of questions and answers from TriviaQA, SQuAD and BioASQ, for LLaMA 2 Chat 70B, are shown in Table <xref rid="Tab1" ref-type="table">1</xref>. These illustrate how only semantic entropy detects when the meaning is constant but the form varies (the first row of the table) whereas semantic entropy and naive entropy both correctly predict the presence of confabulations when the form and meaning vary together (second row) and predict the absence of confabulations when the form and meaning are both constant across several resampled generations (third row). In the final row, we give an example in which semantic entropy is erroneously high as a result of overly sensitive semantic clustering relative to the reference answer. Our clustering method distinguishes the answers which provide a precise date from those which only provide a year. For some contexts that would have been correct but in this context the distinction between the specific day and the year is probably irrelevant. This highlights the importance of context and judgement in clustering, especially in subtle cases, as well as the shortcomings of evaluating against fixed reference answers which do not capture the open-ended flexibility of conversational deployments of LLMs.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Semantic entropy applied to examples</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="2">Question</th><th rowspan="2">Model answer</th><th rowspan="2">Reference answer</th><th rowspan="2">Generations for entropy</th><th colspan="2">Prediction</th></tr><tr><th>Semantic entropy</th><th>Naive entropy</th></tr></thead><tbody><tr><td rowspan="3">Refineries, process chemical, power generation, mills and manufacturing plants are under what sector of construction?</td><td rowspan="3">Refineries, process chemical, power generation, mills and manufacturing plants are under the industrial sector of construction.</td><td rowspan="3">Industrial or heavy civil or heavy engineering.</td><td>&#x02022; All the above are under the industrial sector of construction.</td><td rowspan="3">Not confabulation</td><td rowspan="3">Confabulation</td></tr><tr><td>&#x02022; The refineries, process chemical, power generation, mills and manufacturing plants are under the industrial sector of construction.</td></tr><tr><td>&#x02022; These are all under the heavy industrial sector of construction.</td></tr><tr><td rowspan="3">What is the function of the stard10 protein?</td><td rowspan="3">The stard10 protein functions as a negative regulator of the mTOR pathway by inhibiting the activity of the mTORC1 and mTORC2 complexes.</td><td rowspan="3">STARD10 is a lipid transfer protein.</td><td>&#x02022; The stard10 protein plays a crucial role in regulating the dynamics of the actin cytoskeleton and cell adhesion during cell migration and cell division.</td><td rowspan="3">Confabulation</td><td rowspan="3">Confabulation</td></tr><tr><td>&#x02022; The stard10 protein functions as a negative regulator of the meiotic recombination process, specifically by inhibiting the activity of the Dmc1 recombinase enzyme.</td></tr><tr><td>&#x02022; The stard10 protein functions as a regulator of lipid metabolism, promoting the breakdown of lipids in the liver and inhibiting their synthesis in the liver and adipose tissue.</td></tr><tr><td rowspan="3">Of which European country is &#x02018;fado&#x02019; the national music?</td><td rowspan="3">Portugal.</td><td rowspan="3">Portugal.</td><td>&#x02022; &#x02018;Fado&#x02019; is the national music of Portugal.</td><td rowspan="3">Not confabulation</td><td rowspan="3">Not confabulation</td></tr><tr><td>&#x02022; &#x02018;Fado&#x02019; is the national music of Portugal.</td></tr><tr><td>&#x02022; Fado is the national music of Portugal.</td></tr><tr><td rowspan="3">When was BSkyB&#x02019;s digital service launched?</td><td rowspan="3">1 October 1998.</td><td rowspan="3">BSkyB&#x02019;s digital service was launched in 1998.</td><td>&#x02022; BSkyB&#x02019;s digital service was launched in 1998.</td><td rowspan="3">Confabulation</td><td rowspan="3">Not confabulation</td></tr><tr><td>&#x02022; BSkyB&#x02019;s digital service was launched on 1 October 1998.</td></tr><tr><td>&#x02022; BSkyB&#x02019;s digital service was launched on 1 October 1998.</td></tr></tbody></table><table-wrap-foot><p>The first row of Table <xref rid="Tab1" ref-type="table">1</xref> demonstrates a case in which semantic entropy correctly predicts that an answer is not a confabulation if naive entropy would incorrectly predict a confabulation. All of the generations from the model mean the same thing as each other so they are clustered together despite using different phrasings. The second row provides an example in which semantic entropy and naive entropy would both correctly predict a confabulation, in which each generation is both lexically distinct and also means something different. The third row is an example in which semantic entropy and naive entropy would both correctly predict no confabulation because the multiple generations are almost lexically identical. The fourth row gives an example in which semantic entropy might fail but naive entropy might succeed. In our experiment, semantic entropy clustered the answers into those which provided a specific date and those which gave only a year and treated the model as &#x02018;uncertain&#x02019;. This highlights the importance of context in semantic clustering. The examples come from LLaMA 2 Chat 70B generations for SQuAD, BioASQ and TriviaQA.</p></table-wrap-foot></table-wrap></p></sec><sec id="Sec3"><title>Detecting confabulations in biographies</title><p id="Par20">Semantic entropy is most natural for sentences that express a single proposition but the idea of semantic equivalence is trickier to apply to longer passages which express many propositions which might only agree partially<sup><xref ref-type="bibr" rid="CR43">43</xref></sup>. Nevertheless, we can use semantic entropy to detect confabulations in longer generations, such as entire paragraphs of text. To show this, we develop a dataset of biographical generations from GPT-4 (v.0613) for 21 individuals notable enough to have their own Wikipedia page but without extensive online biographies. From each biography generated by GPT-4, we automatically extract propositional factual claims about the individual (150 factual claims in total), which we manually label as true or false.</p><p id="Par21">Applying semantic entropy to this problem is challenging. Naively, one might simply regenerate each sentence (conditioned on the text so far) and then compute semantic entropy over these regenerations. However, the resampled sentences often target different aspects of the biography: for example, one time describing family and the next time profession. This is analogous to the original problem semantic entropy was designed to resolve: the model is uncertain about the right ordering of facts, not about the facts themselves. To address this, we break down the entire paragraph into factual claims and reconstruct questions which might have been answered by those claims. Only then do we apply semantic entropy (Fig. <xref rid="Fig1" ref-type="fig">1</xref>) by generating three new answers to each question (selected with analysis in Supplementary Figs. <xref rid="MOESM1" ref-type="media">3</xref> and <xref rid="MOESM1" ref-type="media">4</xref>) and computing the semantic entropy over those generations plus the original factual claim. We aggregate these by averaging the semantic entropy over all the questions to get an uncertainty score for each proposition, which we use to detect confabulations. Unaggregated results are shown in Supplementary Figs. <xref rid="MOESM1" ref-type="media">5</xref> and <xref rid="MOESM1" ref-type="media">6</xref>.</p><p id="Par22">As GPT-4 did not allow access to the probability of the generation at the time of writing, we use a discrete variant of semantic entropy which makes the further approximation that we can infer a discrete empirical distribution over semantic meaning clusters from only the generations (<xref rid="Sec5" ref-type="sec">Methods</xref>). This allows us to compute semantic entropy using only the black-box outputs of an LLM. However, we were unable to compute the naive entropy baseline, the standard semantic entropy estimator or the embedding regression baseline for GPT-4 without output probabilities and embeddings.</p><p id="Par23">In Fig. <xref rid="Fig3" ref-type="fig">3</xref> we show that the discrete variant of semantic entropy effectively detects confabulations on this dataset. Its AUROC and AURAC are higher than either a simple &#x02018;self-check&#x02019; baseline&#x02014;which just asks the LLM whether the factoid is likely to be true&#x02014;or a variant of <italic>P</italic>(True) which has been adapted to work for the paragraph-length setting. Discrete semantic entropy has better rejection accuracy performance until 20% of the questions have been rejected at which point <italic>P</italic>(True) has a narrow edge. This indicates that the questions predicted to cause confabulations are indeed more likely to be wrong.<fig id="Fig3"><label>Fig. 3</label><caption><title>Detecting GPT-4&#x000a0;confabulations in paragraph-length biographies.</title><p>The discrete variant of our semantic entropy estimator outperforms baselines both when measured by AUROC and AURAC metrics&#x000a0;(scored on the <italic>y</italic>-axis). The AUROC and AURAC are substantially higher than for both baselines. At above 80% of questions being answered, semantic entropy has the highest accuracy. Only when the top 20% of answers judged most likely to be confabulations are rejected does the answer accuracy on the remainder for the <italic>P</italic>(True) baseline exceed semantic entropy.</p></caption><graphic xlink:href="41586_2024_7421_Fig3_HTML" id="d33e662"/></fig></p></sec><sec id="Sec4" sec-type="discussion"><title>Discussion</title><p id="Par24">Our probabilistic approach, accounting for semantic equivalence, detects an important class of hallucinations: those that are caused by a lack of LLM knowledge. These are a&#x000a0;substantial portion of the failures at present and will continue even as models grow in capabilities because situations and cases that humans cannot reliably supervise will persist. Confabulations are a particularly noteworthy&#x000a0;failure mode for question answering but appear in other domains too. Semantic entropy needs no previous domain knowledge and we expect that algorithmic adaptations to other problems will allow similar advances in, for example, abstractive summarization. In addition, extensions to alternative input variations such as rephrasing or counterfactual scenarios would allow a similar method to act as a form of cross-examination<sup><xref ref-type="bibr" rid="CR44">44</xref></sup> for scalable oversight through debate<sup><xref ref-type="bibr" rid="CR45">45</xref></sup>.</p><p id="Par25">The success of semantic entropy at detecting errors suggests that LLMs are even better at &#x0201c;knowing what they don&#x02019;t know&#x0201d; than was argued by ref. <sup><xref ref-type="bibr" rid="CR24">24</xref></sup>&#x02014;they just don&#x02019;t know they know what they don&#x02019;t know. Our method explicitly does not directly address situations in which LLMs are confidently wrong because they have been trained with objectives that systematically produce dangerous behaviour, cause systematic reasoning errors or are systematically misleading the user. We believe that these represent different underlying mechanisms&#x02014;despite similar &#x02018;symptoms&#x02019;&#x02014;and need to be handled separately.</p><p id="Par26">One exciting aspect of our approach is the way it makes use of classical probabilistic machine learning methods and adapts them to the unique properties of modern LLMs and free-form language generation. We hope to inspire a fruitful exchange of well-studied methods and emerging new problems by highlighting the importance of meaning when addressing language-based machine learning problems.</p></sec><sec id="Sec5" sec-type="materials|methods"><title>Methods</title><p id="Par27">Semantic entropy as a strategy for overcoming confabulation builds on probabilistic tools for uncertainty estimation. It can be applied directly to any LLM or similar foundation model without requiring any modifications to the architecture. Our &#x02018;discrete&#x02019; variant of semantic uncertainty can be applied even when the predicted probabilities for the generations are not available, for example, because access to the internals of the model is limited.</p><p id="Par28">In this section we introduce background on probabilistic methods and uncertainty in machine learning, discuss how it applies to language models and then discuss our contribution, semantic entropy, in detail.</p><sec id="Sec6"><title>Background</title><sec id="Sec7"><title>Uncertainty and machine learning</title><p id="Par29">We aim to detect confabulations in LLMs, using the principle that the model will be uncertain about generations for which its output is going to be arbitrary.</p><p id="Par30">One measure of uncertainty is the predictive entropy of the output distribution, which measures the information one has about the output given the input<sup><xref ref-type="bibr" rid="CR25">25</xref></sup>. The predictive entropy (PE) for an input sentence <bold>x</bold> is the conditional entropy&#x000a0;(<italic>H</italic>) of the output random variable <italic>Y</italic> with realization <italic>y</italic> given <bold>x</bold>,<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\rm{PE}}({\bf{x}})=H(Y| {\bf{x}})=-\sum _{y}P(\,y| {\bf{x}})\mathrm{ln}P(\,y| {\bf{x}}).$$\end{document}</tex-math><mml:math id="M2" display="block"><mml:mrow><mml:mi mathvariant="normal">PE</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>H</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>Y</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mo>&#x02212;</mml:mo><mml:munder><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>y</mml:mi></mml:mrow></mml:munder><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mspace width="0.08em"/><mml:mrow><mml:mi>y</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mi>ln</mml:mi><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mspace width="0.08em"/><mml:mrow><mml:mi>y</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:math><graphic xlink:href="41586_2024_7421_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula>A low predictive entropy indicates an output distribution which is heavily concentrated whereas a high predictive entropy indicates that many possible outputs are similarly likely.</p></sec><sec id="Sec8"><title>Aleatoric and epistemic uncertainty</title><p id="Par31">We do not distinguish between aleatoric and epistemic uncertainty in our analysis. Researchers sometimes separate aleatoric uncertainty (uncertainty in the underlying data distribution) from epistemic uncertainty (caused by having only limited information)<sup><xref ref-type="bibr" rid="CR46">46</xref></sup>. Further advances in uncertainty estimation which separate these kinds of uncertainty would enhance the potential for our semantic uncertainty approach by allowing extensions beyond entropy.</p></sec><sec id="Sec9"><title>Joint probabilities of sequences of tokens</title><p id="Par32">Generative LLMs produce strings of text by selecting tokens in sequence. Each token is a wordpiece that often represents three or four characters (though especially common sequences and important words such as numbers typically get their own token). To compute entropies, we need access to the probabilities the LLM assigns to the generated sequence of tokens. The probability of the entire sequence, <bold>s</bold>, conditioned on the context, <bold>x</bold>, is the product of the conditional probabilities of new tokens given past tokens, whose resulting log-probability is <inline-formula id="IEq1"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\log P({\bf{s}}| {\boldsymbol{x}})={\sum }_{i}\log P({s}_{i}| {{\bf{s}}}_{ &#x0003c; i},{\boldsymbol{x}})$$\end{document}</tex-math><mml:math id="M4"><mml:mrow><mml:mi>log</mml:mi><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mo mathsize="big">&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mi>log</mml:mi><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02223;</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">s</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x0003c;</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq1.gif"/></alternatives></inline-formula>, where <italic>s</italic><sub><italic>i</italic></sub> is the <italic>i</italic>th output token and <bold>s</bold><sub>&#x0003c;<italic>i</italic></sub> denotes the set of previous tokens.</p></sec><sec id="Sec10"><title>Length normalization</title><p id="Par33">When comparing the log-probabilities of generated sequences, we use &#x02018;length normalization&#x02019;, that is, we use an arithmetic mean log-probability, <inline-formula id="IEq2"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\frac{1}{N}{\sum }_{i}^{N}\log P({s}_{i}| {{\bf{s}}}_{ &#x0003c; i},{\boldsymbol{x}})$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:mfrac><mml:msubsup><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:msubsup><mml:mi>log</mml:mi><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02223;</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">s</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x0003c;</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq2.gif"/></alternatives></inline-formula>, instead of the sum. In expectation, longer sequences have lower joint likelihoods because of the conditional independence of the token probabilities<sup><xref ref-type="bibr" rid="CR47">47</xref></sup>. The joint likelihood of a sequence of length <italic>N</italic> shrinks exponentially in <italic>N</italic>. Its negative log-probability therefore grows linearly in <italic>N</italic>, so longer sentences tend to contribute more to entropy. We therefore interpret length-normalizing the log-probabilities when estimating the entropy as asserting that the expected uncertainty of generations is independent of sentence length. Length normalization has some empirical success<sup><xref ref-type="bibr" rid="CR48">48</xref></sup>, including in our own preliminary experiments, but little theoretical justification in the literature.</p></sec></sec><sec id="Sec11"><title>Principles of semantic uncertainty</title><p id="Par34">If we naively calculate the predictive entropy directly from the probabilities of the generated sequence of tokens, we conflate the uncertainty of the model over the meaning of its answer with the uncertainty over the exact tokens used to express that meaning. For example, even if the model is confident in the meaning of a generation, there are still usually many different ways for phrasing that generation without changing its meaning. For the purposes of detecting confabulations, the uncertainty of&#x000a0;the LLM over meanings is more important than the uncertainty over the exact tokens used to express those meanings.</p><p id="Par35">Our semantic uncertainty method therefore seeks to estimate only the uncertainty the LLM has over the meaning of its generation, not the choice of words. To do this, we introduce an algorithm that clusters model generations by meaning and subsequently calculates semantic uncertainty. At a high level this involves three steps:<list list-type="order"><list-item><p id="Par36">Generation: sample output sequences of tokens from the predictive distribution of a LLM given a context <bold>x</bold>.</p></list-item><list-item><p id="Par37">Clustering: cluster sequences by their meaning using our clustering algorithm based on bidirectional entailment.</p></list-item><list-item><p id="Par38">Entropy estimation: estimate semantic entropy by summing probabilities of sequences that share a meaning following equation (<xref rid="Equ2" ref-type="disp-formula">2</xref>) and compute their entropy.</p></list-item></list></p><sec id="Sec12"><title>Generating a set of answers from the model</title><p id="Par39">Given some context <bold>x</bold> as input to the LLM, we sample <italic>M</italic> sequences, {<bold>s</bold><sup>(1)</sup>,&#x02009;&#x02026;,&#x02009;<bold>s</bold><sup>(<italic>M</italic>)</sup>} and record their token probabilities, {<italic>P</italic>(<bold>s</bold><sup>(1)</sup>&#x02223;<bold>x</bold>),&#x02009;&#x02026;,&#x02009;<italic>P</italic>(<bold>s</bold><sup>(<italic>M</italic>)</sup>&#x02223;<bold>x</bold>)}. We sample all our generations from a single model, varying only the random seed used for sampling from the token probabilities. We do not observe the method to be particularly sensitive to details of the sampling scheme. In our implementation, we sample at temperature 1 using nucleus sampling (<italic>P</italic>&#x02009;=&#x02009;0.9) (ref. <sup><xref ref-type="bibr" rid="CR49">49</xref></sup>) and top-<italic>K</italic> sampling (<italic>K</italic>&#x02009;=&#x02009;50) (ref. <sup><xref ref-type="bibr" rid="CR50">50</xref></sup>). We also sample a single generation at low temperature (0.1) as an estimate of the &#x02018;best generation&#x02019; of the model to the context, which we use to assess the accuracy of the model. (A lower sampling temperature increases the probability of sampling the most likely tokens).</p></sec><sec id="Sec13"><title>Clustering by semantic equivalence</title><p id="Par40">To estimate semantic entropy we need to cluster generated outputs from the model into groups of outputs that mean the same thing as each other.</p><p id="Par41">This can be described using &#x02018;semantic equivalence&#x02019; which is the relation that holds between two sentences when they mean the same thing. We can formalize semantic equivalence mathematically. Let the space of tokens in a language be <inline-formula id="IEq3"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\mathcal{T}}$$\end{document}</tex-math><mml:math id="M8"><mml:mi class="MJX-tex-caligraphic" mathvariant="script">T</mml:mi></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq3.gif"/></alternatives></inline-formula>. The space of all possible sequences of tokens of length <italic>N</italic> is then <inline-formula id="IEq4"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${{\mathcal{S}}}_{N}\equiv {{\mathcal{T}}}^{N}$$\end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:msub><mml:mrow><mml:mi class="MJX-tex-caligraphic" mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02261;</mml:mo><mml:msup><mml:mrow><mml:mi class="MJX-tex-caligraphic" mathvariant="script">T</mml:mi></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq4.gif"/></alternatives></inline-formula>. Note that <italic>N</italic> can be made arbitrarily large to accommodate whatever size of sentence one can imagine and one of the tokens can be a &#x02018;padding&#x02019; token which occurs with certainty for each token after the end-of-sequence token. For some sentence <inline-formula id="IEq5"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\bf{s}}\in {{\mathcal{S}}}_{N}$$\end{document}</tex-math><mml:math id="M12"><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02208;</mml:mo><mml:msub><mml:mrow><mml:mi class="MJX-tex-caligraphic" mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>N</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq5.gif"/></alternatives></inline-formula>, composed of a sequence of tokens, <inline-formula id="IEq6"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${s}_{i}\in {\mathcal{T}}$$\end{document}</tex-math><mml:math id="M14"><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02208;</mml:mo><mml:mi class="MJX-tex-caligraphic" mathvariant="script">T</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq6.gif"/></alternatives></inline-formula>, there is an associated meaning. Theories of meaning are contested<sup><xref ref-type="bibr" rid="CR51">51</xref></sup>. However, for specific models and deployment contexts many considerations can be set aside. Care should be taken comparing very different models and contexts.</p><p id="Par42">Let us introduce a semantic equivalence relation, <italic>E</italic>(&#x02009;&#x022c5;&#x02009;,&#x02009;&#x022c5;&#x02009;), which holds for any two sentences that mean the same thing&#x02014;we will operationalize this presently. Recall that an equivalence relation is any reflexive, symmetric and transitive relation and that any equivalence relation on a set corresponds to a set of equivalence classes. Each semantic equivalence class captures outputs that can be considered to express the same meaning. That is, for the space of semantic equivalence classes <inline-formula id="IEq7"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\mathcal{C}}$$\end{document}</tex-math><mml:math id="M16"><mml:mi class="MJX-tex-caligraphic" mathvariant="script">C</mml:mi></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq7.gif"/></alternatives></inline-formula> the sentences in the set <inline-formula id="IEq8"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c\in {\mathcal{C}}$$\end{document}</tex-math><mml:math id="M18"><mml:mrow><mml:mi>c</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi class="MJX-tex-caligraphic" mathvariant="script">C</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq8.gif"/></alternatives></inline-formula> can be regarded in many settings as expressing a similar meaning such that <inline-formula id="IEq9"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\forall {\bf{s}},{{\bf{s}}}^{{\prime} }\in c:E({\bf{s}},{{\bf{s}}}^{{\prime} })$$\end{document}</tex-math><mml:math id="M20"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi mathvariant="bold">s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">s</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:msup><mml:mo>&#x02208;</mml:mo><mml:mi>c</mml:mi><mml:mo>:</mml:mo><mml:mi>E</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="bold">s</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq9.gif"/></alternatives></inline-formula>. So we can build up these classes of semantically equivalent sentences by checking if new sentences share a meaning with any sentences we have already clustered and, if so, adding them into that class.</p><p id="Par43">We operationalize <italic>E</italic>(&#x02009;&#x022c5;&#x02009;,&#x02009;&#x022c5;&#x02009;) using the idea of bidirectional entailment, which has a long history in linguistics<sup><xref ref-type="bibr" rid="CR52">52</xref></sup> and natural language processing<sup><xref ref-type="bibr" rid="CR28">28</xref>,<xref ref-type="bibr" rid="CR53">53</xref>,<xref ref-type="bibr" rid="CR54">54</xref></sup>. A sequence, <bold>s</bold>, means the same thing as a second sequence, <bold>s</bold>&#x02032;, only if the sequences entail (that is, logically imply) each other. For example, &#x02018;The capital of France is Paris&#x02019; entails &#x02018;Paris is the capital of France&#x02019; and vice versa because they mean the same thing. (See later for a discussion of soft equivalence and cases in which bidirectional entailment does not guarantee equivalent meanings).</p><p id="Par44">Importantly, we require that the sequences mean the same thing with respect to the context&#x02014;key meaning is sometimes contained in the context. For example, &#x02018;Paris&#x02019; does not entail &#x02018;The capital of France is Paris&#x02019; because &#x02018;Paris&#x02019; is not a declarative sentence without context. But in the context of the question &#x02018;What is the capital of France?&#x02019;, the one-word answer does entail the longer answer.</p><p id="Par45">Detecting entailment has been the object of study of a great deal of research in NLI<sup><xref ref-type="bibr" rid="CR55">55</xref></sup>. We rely on language models to predict entailment, such as DeBERTa-Large-MNLI<sup><xref ref-type="bibr" rid="CR56">56</xref></sup>, which has been trained to predict entailment, or general-purpose LLMs such as GPT-3.5 (ref. <sup><xref ref-type="bibr" rid="CR57">57</xref></sup>), which can predict entailment given suitable prompts.</p><p id="Par46">We then cluster sentences according to whether they bidirectionally entail each other using the algorithm presented in Extended Data Fig. <xref rid="Fig4" ref-type="fig">1</xref>. Note that, to check if a sequence should be added to an existing cluster, it is sufficient to check if the sequence bidirectionally entails any of the existing sequences in that cluster (we arbitrarily pick the first one), given the transitivity of semantic equivalence. If a sequence does not share meaning with any existing cluster, we assign it its own cluster.</p></sec><sec id="Sec14"><title>Computing the semantic entropy</title><p id="Par47">Having determined the classes of generated sequences that mean the same thing, we can estimate the likelihood that a sequence generated by the LLM belongs to a given class by computing the sum of the probabilities of all the possible sequences of tokens which can be considered to express the same meaning as<disp-formula id="Equ2"><label>2</label><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$P(c| {\boldsymbol{x}})=\sum _{{\bf{s}}\in c}P({\bf{s}}| {\boldsymbol{x}})=\sum _{{\bf{s}}\in c}\prod _{i}P({s}_{i}| {{\bf{s}}}_{ &#x0003c; i},{\boldsymbol{x}}).$$\end{document}</tex-math><mml:math id="M22" display="block"><mml:mrow><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>c</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>c</mml:mi></mml:mrow></mml:munder><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>c</mml:mi></mml:mrow></mml:munder><mml:munder><mml:mrow><mml:mo>&#x0220f;</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:munder><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02223;</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="bold">s</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x0003c;</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:math><graphic xlink:href="41586_2024_7421_Article_Equ2.gif" position="anchor"/></alternatives></disp-formula>Formally, this treats the output as a random variable whose event-space is the space of all possible meaning-classes, <italic>C</italic>, a sub-<italic>&#x003c3;</italic>-algebra of the standard event-space <italic>S</italic>. We can then estimate the semantic entropy (SE) as the entropy over the meaning-distribution,<disp-formula id="Equ3"><label>3</label><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\rm{SE}}(x)=-\sum _{c}P(c| {\boldsymbol{x}})\log P(c| {\boldsymbol{x}})$$\end{document}</tex-math><mml:math id="M24" display="block"><mml:mrow><mml:mi mathvariant="normal">SE</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mo>&#x02212;</mml:mo><mml:munder><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>c</mml:mi></mml:mrow></mml:munder><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>c</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mi>log</mml:mi><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>c</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math><graphic xlink:href="41586_2024_7421_Article_Equ3.gif" position="anchor"/></alternatives></disp-formula><disp-formula id="Equ4"><label>4</label><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$=-\sum _{c}\left(\left[\sum _{{\bf{s}}\in c}P({\bf{s}}| {\boldsymbol{x}})\right]\log \left[\sum _{{\bf{s}}\in c}P({\bf{s}}| {\boldsymbol{x}})\right]\right).$$\end{document}</tex-math><mml:math id="M26" display="block"><mml:mrow><mml:mo>=</mml:mo><mml:mo>&#x02212;</mml:mo><mml:munder><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>c</mml:mi></mml:mrow></mml:munder><mml:mrow><mml:mrow><mml:mfenced close=")" open="("><mml:mrow><mml:mrow><mml:mrow><mml:mfenced close="]" open="["><mml:mrow><mml:munder><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>c</mml:mi></mml:mrow></mml:munder><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mfenced></mml:mrow></mml:mrow><mml:mi>log</mml:mi><mml:mrow><mml:mrow><mml:mfenced close="]" open="["><mml:mrow><mml:munder><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>c</mml:mi></mml:mrow></mml:munder><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="bold">s</mml:mi><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mfenced></mml:mrow></mml:mrow></mml:mrow></mml:mfenced></mml:mrow></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:math><graphic xlink:href="41586_2024_7421_Article_Equ4.gif" position="anchor"/></alternatives></disp-formula>There is a complication which prevents direct computation: we do not have access to every possible meaning-class <italic>c</italic>. Instead, we can only sample <italic>c</italic> from the sequence-generating distribution induced by the model. To handle this, we estimate the expectation in equation (<xref rid="Equ3" ref-type="disp-formula">3</xref>) using a Rao&#x02013;Blackwellized Monte Carlo integration over the semantic equivalence classes <italic>C</italic>,<disp-formula id="Equ5"><label>5</label><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{array}{r}{\rm{SE}}(x)\approx -\mathop{\sum }\limits_{i=1}^{| C| }P({C}_{i}| {\boldsymbol{x}})\log P({C}_{i}| {\boldsymbol{x}}),\end{array}$$\end{document}</tex-math><mml:math id="M28" display="block"><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mi mathvariant="normal">SE</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>&#x02248;</mml:mo><mml:mo>&#x02212;</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>&#x02223;</mml:mo><mml:mi>C</mml:mi><mml:mo>&#x02223;</mml:mo></mml:mrow></mml:munderover><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mi>log</mml:mi><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="41586_2024_7421_Article_Equ5.gif" position="anchor"/></alternatives></disp-formula>where <inline-formula id="IEq10"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$P({C}_{i}| {\boldsymbol{x}})=\frac{P({c}_{i}| {\boldsymbol{x}})}{{\sum }_{c}P(c| {\boldsymbol{x}})}$$\end{document}</tex-math><mml:math id="M30"><mml:mrow><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>&#x02223;</mml:mo><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mspace width="-0.25em"/><mml:mo>&#x02223;</mml:mo><mml:mspace width="-0.25em"/><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mo mathsize="big">&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>c</mml:mi></mml:mrow></mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>c</mml:mi><mml:mspace width="-0.25em"/><mml:mo>&#x02223;</mml:mo><mml:mspace width="-0.25em"/><mml:mi mathvariant="bold-italic">x</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq10.gif"/></alternatives></inline-formula> estimates a categorical distribution over the cluster meanings, that is, &#x02211;<sub><italic>i</italic></sub><italic>P</italic>(<italic>C</italic><sub><italic>i</italic></sub>&#x02223;<bold>x</bold>)&#x02009;=&#x02009;1. Without this normalization step cluster &#x02018;probabilities&#x02019; could exceed one because of length normalization, resulting in degeneracies. Equation (<xref rid="Equ5" ref-type="disp-formula">5</xref>) is the estimator giving our main method that we refer to as semantic entropy throughout the text.</p><p id="Par48">For scenarios in which the sequence probabilities are not available, we propose a variant of semantic entropy which we call &#x02018;discrete&#x02019; semantic entropy. Discrete semantic entropy approximates <italic>P</italic>(<italic>C</italic><sub><italic>i</italic></sub>&#x02223;<bold>x</bold>) directly from the number of generations in each cluster, disregarding the token probabilities. That is, we approximate <italic>P</italic>(<italic>C</italic><sub><italic>i</italic></sub>&#x02223;<bold>x</bold>) as <inline-formula id="IEq11"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${\sum }_{1}^{M}\frac{{I}_{c={C}_{i}}}{M}$$\end{document}</tex-math><mml:math id="M32"><mml:mrow><mml:msubsup><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msubsup><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>I</mml:mi></mml:mrow><mml:mrow><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:math><inline-graphic xlink:href="41586_2024_7421_Article_IEq11.gif"/></alternatives></inline-formula>, the proportion of all the sampled answers which belong to that cluster. Effectively, this just assumes that each output that was actually generated was equally probable&#x02014;estimating the underlying distribution as the categorical empirical distribution. In the limit of <italic>M</italic> the estimator converges to equation (<xref rid="Equ5" ref-type="disp-formula">5</xref>) by the law of large numbers. We find that discrete semantic entropy results in similar performance empirically.</p><p id="Par49">We provide a worked example of the computation of semantic entropy in Supplementary Note&#x000a0;<xref rid="MOESM1" ref-type="media">1</xref>.</p></sec></sec><sec id="Sec15"><title>Detecting confabulations in QA and math</title><p id="Par50">Semantic entropy is designed to detect confabulations, that is, model outputs with arbitrary meaning. In our experiments, we use semantic uncertainty to predict model accuracy, demonstrating that confabulations make up a notable fraction of model mistakes. We further show that semantic uncertainty can be used to improve model accuracy by refusing to answer questions when semantic uncertainty is high. Last, semantic uncertainty can be used to give users a way to know when model generations are probably unreliable.</p><sec id="Sec16"><title>Tasks</title><p id="Par51">We use the datasets BioASQ<sup><xref ref-type="bibr" rid="CR34">34</xref></sup>, SQuAD<sup><xref ref-type="bibr" rid="CR33">33</xref></sup>, TriviaQA<sup><xref ref-type="bibr" rid="CR32">32</xref></sup>, SVAMP<sup><xref ref-type="bibr" rid="CR37">37</xref></sup> and NQ-Open<sup><xref ref-type="bibr" rid="CR35">35</xref></sup>. BioASQ is a life-sciences question-answering dataset based on the annual challenge of the same name. The specific dataset we use is based on the QA dataset from Task B of the 2023 BioASQ challenge (11B). SQuAD is a reading comprehension dataset whose context passages are drawn from Wikipedia and for which the answers to questions can be found in these passages. We use SQuAD 1.1 which excludes the unanswerable questions added in v.2.0 that are deliberately constructed to induce mistakes so they do not in practice cause confabulations to occur. TriviaQA is a trivia question-answering dataset. SVAMP is a word-problem maths dataset containing elementary-school mathematical reasoning tasks. NQ-Open is a dataset of realistic questions aggregated from Google Search which have been chosen to be answerable without reference to a source text. For each dataset, we use 400 train examples and 400 test examples randomly sampled from the original larger dataset. Note that only some of the methods require training, for example semantic entropy does not use the training data. If the datasets themselves are already split into train and test (or validation) samples, we sample our examples from within the corresponding split.</p><p id="Par52">All these datasets are free-form, rather than multiple choice, because this better captures the opportunities created by LLMs to produce free-form sentences as answers. We refer to this default scenario as our &#x02018;sentence-length&#x02019; experiments. In Supplementary Note&#x000a0;<xref rid="MOESM1" ref-type="media">7</xref>, we also present results for confabulation detection in a &#x02018;short-phrase&#x02019; scenario, in which we constrain model answers on these datasets to be as concise as possible.</p><p id="Par53">To make the problems more difficult and induce confabulations, we do not provide the context passages for any of the datasets. When the context passages are provided, the accuracy rate is too high for these datasets for the latest generations of models to meaningfully study confabulations.</p></sec><sec id="Sec17"><title>Models</title><p id="Par54">For sentence-length generations we use: Falcon<sup><xref ref-type="bibr" rid="CR39">39</xref></sup> Instruct (7B and 40B), LLaMA 2 Chat<sup><xref ref-type="bibr" rid="CR38">38</xref></sup> (7B, 13B and 70B) and Mistral<sup><xref ref-type="bibr" rid="CR40">40</xref></sup> Instruct (7B).</p></sec><sec id="Sec18"><title>Baselines</title><p id="Par55">In addition to reporting results for semantic entropy, discrete semantic entropy and naive entropy, we consider two strong baselines.</p><p id="Par56">Embedding regression is a supervised baseline inspired by the <italic>P</italic>(IK) method<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>. In that paper, the authors fine-tune their proprietary LLM on a dataset of questions to predict whether the model would have been correct. This requires access to a dataset of ground-truth answers to the questions. Rather than fine-tuning the entire LLM in this way, we simply take the final hidden units and train a logistic regression classifier to make the same prediction. By contrast to their method, this is much simpler because it does not require fine-tuning the entire language model, as well as being more reproducible because the solution to the logistic regression optimization problem is not as seed-dependent as the fine-tuning procedure. As expected, this supervised approach performs well in-distribution but fails when the distribution of questions is different from that on which the classifier is trained.</p><p id="Par57">The second baseline we consider is the <italic>P</italic>(True) method<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>, in which the model first samples <italic>M</italic> answers (identically to our semantic entropy approach) and then is prompted with the list of all answers generated followed by the highest probability answer and a question whether this answer is &#x0201c;(a) True&#x0201d; or &#x0201c;(b) False&#x0201d;. The confidence score is then taken to be the probability with which the LLM responds with &#x02018;a&#x02019; to the multiple-choice question. The performance of this method is boosted with a few-shot prompt, in which up to 20 examples from the training set are randomly chosen, filled in as above, but then provided with the actual ground truth of whether the proposed answer was true or false. In this way, the method can be considered as supervised &#x02018;in-context&#x02019; because it makes use of some ground-truth training labels but can be used without retraining the model. Because of context-size constraints, this method cannot fit a full 20 few-shot examples in the context when input questions are long or large numbers of generations are used. As a result, we sometimes have to reduce the number of few-shot examples to suit the context size and we note this&#x000a0;in the&#x000a0;<xref rid="MOESM1" ref-type="media">Supplementary Material</xref>.</p></sec><sec id="Sec19"><title>Entailment estimator</title><p id="Par58">Any NLI classification system could be used for our bidirectional entailment clustering algorithm. We consider two different kinds of entailment detector.</p><p id="Par59">One option is to use an instruction-tuned LLM such as LLaMA 2, GPT-3.5 (Turbo 1106) or GPT-4 to predict entailment between generations. We use the following prompt:</p><p id="Par60">
<disp-quote><p id="Par61">We are evaluating answers to the question {question}</p><p id="Par62">Here are two possible answers:</p><p id="Par63">Possible Answer 1: {text1}</p><p id="Par64">Possible Answer 2: {text2}</p><p id="Par65">Does Possible Answer 1 semantically entail Possible Answer 2? Respond with entailment, contradiction, or neutral.</p></disp-quote>
</p><p id="Par66">Alternatively, we consider using a language model trained for entailment prediction, specifically the DeBERTa-large model<sup><xref ref-type="bibr" rid="CR56">56</xref></sup> fine-tuned on the NLI dataset MNLI<sup><xref ref-type="bibr" rid="CR58">58</xref></sup>. This builds on past work towards paraphrase identification based on embedding similarity<sup><xref ref-type="bibr" rid="CR59">59</xref>,<xref ref-type="bibr" rid="CR60">60</xref></sup> and BERT-style models<sup><xref ref-type="bibr" rid="CR61">61</xref>,<xref ref-type="bibr" rid="CR62">62</xref></sup>. We template more simply, checking if DeBERTa predicts entailment between the concatenation of the question and one answer and the concatenation of the question and another answer. Note that DeBERTa-large is a relatively lightweight model with only 1.5B parameters which is much less powerful than most of the LLMs under study.</p><p id="Par67">In Supplementary Note <xref rid="MOESM1" ref-type="media">2</xref>, we carefully evaluate the benefits and drawbacks of these methods for entailment prediction. We settle on using GPT-3.5 with the above prompt, as its entailment predictions agree well with human raters and lead to good confabulation detection performance.</p><p id="Par68">In Supplementary Note&#x000a0;<xref rid="MOESM1" ref-type="media">3</xref>, we provide a discussion of the computational cost and choosing the number of generations for reliable clustering.</p></sec><sec id="Sec20"><title>Prompting templates</title><p id="Par69">We use a simple generation template for all sentence-length answer datasets:</p><p id="Par70">
<disp-quote><p id="Par71">Answer the following question in a single brief but complete sentence.</p><p id="Par72">Question: {question}</p><p id="Par73">Answer:</p></disp-quote>
</p></sec><sec id="Sec21"><title>Metrics and accuracy measurements</title><p id="Par74">We use three main metrics to evaluate our method: AUROC, rejection accuracy and AURAC. Each of these is grounded in an automated factuality estimation measurement relative to the reference answers provided by the datasets that we use.</p><sec id="FPar1"><title>AUROC, rejection accuracy and AURAC</title><p id="Par75">First, we use the AUROC curve, which measures the reliability of a classifier accounting for both precision and recall. The AUROC can be interpreted as the probability that a randomly chosen correct answer has been assigned a higher confidence score than a randomly chosen incorrect answer. For a perfect classifier, this is 1.</p><p id="Par76">Second, we compute the &#x02018;rejection accuracy at <italic>X</italic>%&#x02019;, which is the question-answering accuracy of the model on the most-confident <italic>X</italic>% of the inputs as identified by the respective uncertainty method. If an uncertainty method works well, predictions on the confident subset should be more accurate than predictions on the excluded subset and the rejection accuracy should increase as we reject more inputs.</p><p id="Par77">To summarize this statistic we compute the AURAC&#x02014;the total area enclosed by the accuracies at all cut-off percentages <italic>X</italic>%. This should increase towards 1 as given uncertainty method becomes more accurate and better at detecting likely-inaccurate responses but it is more sensitive to the overall accuracy of the model than the AUROC metric.</p><p id="Par78">In Supplementary Note&#x000a0;<xref rid="MOESM1" ref-type="media">5</xref>, we provide the unaggregated rejection accuracies for sentence-length generations.</p></sec><sec id="FPar2"><title>Assessing accuracy</title><p id="Par79">For the short-phrase-length generation setting presented in Supplementary Note&#x000a0;<xref rid="MOESM1" ref-type="media">7</xref>, we simply assess the accuracy of the generations by checking if the F1 score of the commonly used SQuAD metric exceeds 0.5. There are limitations to such simple scoring rules<sup><xref ref-type="bibr" rid="CR63">63</xref></sup> but this method is widely used in practice and its error is comparatively small on these standard datasets.</p><p id="Par80">For our default scenario, the longer sentence-length generations, this measure fails, as the overlap between the short reference answer and our long model answer is invariably too small. For sentence-length generations, we therefore automatically determine whether an answer to the question is correct or incorrect by using GPT-4 to compare the given answer to the reference answer. We use the template:</p><p id="Par81">
<disp-quote><p id="Par82">We are assessing the quality of answers to the following question: {question}</p><p id="Par83">The expected answer is: {reference answer}</p><p id="Par84">The proposed answer is: {predicted answer}</p><p id="Par85">Within the context of the question, does the proposed answer mean the same as the expected answer? Respond only with yes or no.</p></disp-quote>
</p><p id="Par86">We make a small modification for datasets with several reference answers: line two becomes &#x0201c;The following are expected answers to this question:&#x0201d; and the final line asks &#x0201c;does the proposed answer mean the same as any of the expected answers?&#x0201d;.</p><p id="Par87">In Supplementary Note <xref rid="MOESM1" ref-type="media">6</xref>, we check the quality of our automated ground-truth evaluations against human judgement by hand. We find that GPT-4 gives the best results for determining model accuracy and thus use it in all our sentence-length experiments.</p></sec></sec></sec><sec id="Sec22"><title>Detecting confabulations in biographies</title><p id="Par88">In this section we describe the application of semantic entropy to confabulation detection in longer model generations, specifically paragraph-length biographies.</p><p id="Par89">We introduce a biography-generation dataset&#x02014;FactualBio&#x02014;available alongside this paper. FactualBio is a collection of biographies of individuals who are notable enough to have Wikipedia pages but not notable enough to have large amounts of detailed coverage, generated by GPT-4 (v.0613). To generate the dataset, we randomly sampled 21 individuals from the WikiBio dataset<sup><xref ref-type="bibr" rid="CR64">64</xref></sup>. For each biography, we generated a list of factual claims contained in each biography using GPT-4, with 150 total factual claims (the total number is only coincidentally a round number). For each of these factual claims, we manually determined whether the claim was correct or incorrect. Out of 150 claims, 45 were incorrect. As before, we apply confabulation detection to detect incorrect model predictions, even though there may be model errors which are not confabulations.</p><sec id="Sec23"><title>Prompting and generation</title><p id="Par90">Given a paragraph-length piece of LLM-generated text, we apply the following sequence of steps:<list list-type="order"><list-item><p id="Par91">Automatically decompose the paragraph into specific factual claims using an LLM (not necessarily the same as the original).</p></list-item><list-item><p id="Par92">For each factual claim, use an LLM to automatically construct <italic>Q</italic> questions which might have produced that claim.</p></list-item><list-item><p id="Par93">For each question, prompt the original LLM to generate <italic>M</italic> answers.</p></list-item><list-item><p id="Par94">For each question, compute the semantic entropy of the answers, including the original factual claim.</p></list-item><list-item><p id="Par95">Average the semantic entropies over the questions to arrive at a score for the original factual claim.</p></list-item></list></p><p id="Par96">We pursue this slightly indirect way of generating answers because we find that simply resampling each sentence creates variation unrelated to the uncertainty of the model about the factual claim, such as differences in paragraph structure.</p><p id="Par97">We decompose the paragraph into factual claims using the following prompt:</p><p id="Par98">
<disp-quote><p id="Par99">Please list the specific factual propositions included in the answer above. Be complete and do not leave any factual claims out. Provide each claim as a separate sentence in a separate bullet point.</p></disp-quote>
</p><p id="Par100">We found that we agreed with the decompositions in all cases in the dataset.</p><p id="Par101">We then generate six questions for each of the facts from the decomposition. We generate these questions by prompting the model twice with the following:</p><p id="Par102">
<disp-quote><p id="Par103">Following this text:</p><p id="Par104">{text so far}</p><p id="Par105">You see the sentence:</p><p id="Par106">{proposition}</p><p id="Par107">Generate a list of three questions, that might have generated the sentence in the context of the preceding original text, as well as their answers. Please do not use specific facts that appear in the follow-up sentence when formulating the question. Make the questions and answers diverse. Avoid yes-no questions. The answers should not be a full sentence and as short as possible, e.g. only a name, place, or thing. Use the format &#x0201c;1. {question} &#x02013; {answer}&#x0201d;.</p></disp-quote>
</p><p id="Par108">These questions are not necessarily well-targeted and the difficulty of this step is the main source of errors in the procedure. We generate three questions with each prompt, as this encourages diversity of the questions, each question targeting a different aspect of the fact. However, we observed that the generated questions will sometimes miss obvious aspects of the fact. Executing the above prompt twice (for a total of six questions) can improve coverage. We also ask for brief answers because the current version of GPT-4 tends to give long, convoluted and highly hedged answers unless explicitly told not to.</p><p id="Par109">Then, for each question, we generate three new answers using the following prompt:</p><p id="Par110">
<disp-quote><p id="Par111">We are writing an answer to the question &#x0201c;{user question}&#x0201d;. So far we have written:</p><p id="Par112">{text so far}</p><p id="Par113">The next sentence should be the answer to the following question:</p><p id="Par114">{question}</p><p id="Par115">Please answer this question. Do not answer in a full sentence. Answer with as few words as possible, e.g. only a name, place, or thing.</p></disp-quote>
</p><p id="Par116">We then compute the semantic entropy over these answers plus the original factual claim. Including the original fact ensures that the estimator remains grounded in the original claim and helps detect situations in which the question has been interpreted completely differently from the original context. We make a small modification to handle the fact that GPT-4 generations often include refusals to answer questions. These refusals were not something we commonly observe in our experiments with LLaMA 2, Falcon or Mistral models. If more than half of the answers include one of the strings &#x02018;not available&#x02019;, &#x02018;not provided&#x02019;, &#x02018;unknown&#x02019; or &#x02018;unclear&#x02019; then we treat the semantic uncertainty as maximal.</p><p id="Par117">We then average the semantic entropies for each question corresponding to the factual claim to get an entropy for this factual claim.</p><p id="Par118">Despite the extra assumptions and complexity, we find that this method greatly outperforms the baselines.</p></sec><sec id="Sec24"><title>Entailment estimator</title><p id="Par119">To compute semantic entailment between the original claim and regenerated answers, we rely on the DeBERTa entailment prediction model as we find empirically that DeBERTa predictions result in higher train-set AUROC than other methods. Because DeBERTa has slightly lower recall than GPT-3.5/4, we use a modified set-up for which we say the answers mean the same as each other if at least one of them entails the other and neither is seen to contradict the other&#x02014;a kind of &#x02018;non-defeating&#x02019; bidirectional entailment check rather than true bidirectional entailment. The good performance of DeBERTa in this scenario is not surprising as both factual claims and regenerated answers are relatively short. We refer to Supplementary Notes <xref rid="MOESM1" ref-type="media">2</xref> and <xref rid="MOESM1" ref-type="media">3</xref> for ablations and experiments regarding our choice of entailment estimator for paragraph-length generations.</p></sec><sec id="Sec25"><title>Baselines</title><p id="Par120">We implement two baselines. First, we implement a variant of the <italic>P</italic>(True) method, which is adapted to the new setting. For each factoid, we generate a question with answers in the same way as for semantic entropy. We then use the following prompt:</p><p id="Par121">
<disp-quote><p id="Par122">Question: {question}</p><p id="Par123">Here are some brainstormed ideas:</p><p id="Par124">{list of regenerated answers}</p><p id="Par125">Possible answer: {original answer}</p><p id="Par126">Is the possible answer true? Respond with &#x0201c;yes&#x0201d; or &#x0201c;no&#x0201d;.</p></disp-quote>
</p><p id="Par127">As we cannot access the probabilities GPT-4 assigns to predicting &#x02018;yes&#x02019; and &#x02018;no&#x02019; as the next token, we approximate this using Monte Carlo samples. Concretely, we execute the above prompt ten times (at temperature 1) and then take the fraction of answers which was &#x02018;yes&#x02019; as our unbiased Monte Carlo estimate of the token probability GPT-4 assigns to &#x02018;yes&#x02019;.</p><p id="Par128">As a second, simpler, baseline we check if the model thinks the answer is true. We simply ask:</p><p id="Par129">
<disp-quote><p id="Par130">Following this text:</p><p id="Par131">{text so far}</p><p id="Par132">You see this statement:</p><p id="Par133">{proposition}</p><p id="Par134">Is it likely that the statement is true? Respond with &#x02018;yes&#x02019; or &#x02018;no&#x02019;.</p></disp-quote>
</p><p id="Par135">It is interesting that this method ought to perform very well if we think that the model has good &#x02018;self-knowledge&#x02019; (that is, if &#x0201c;models mostly know what they don&#x02019;t know&#x0201d;<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>) but in fact semantic entropy is much better at detecting confabulations.</p></sec></sec></sec><sec id="Sec26" sec-type="materials|methods"><title>Online content</title><p id="Par136">Any methods, additional references, Nature Portfolio reporting summaries, source data, extended data, supplementary information, acknowledgements, peer review information; details of author contributions and competing interests; and statements of data and code availability are available at 10.1038/s41586-024-07421-0.</p></sec><sec sec-type="supplementary-material"><sec id="Sec28"><title>Supplementary information</title><p>
<supplementary-material content-type="local-data" id="MOESM1"><media xlink:href="41586_2024_7421_MOESM1_ESM.pdf"><label>Supplementary Information</label><caption><p>Supplementary Notes 1&#x02013;7, Figs. 1&#x02013;10, Tables 1&#x02013;4 and references. Includes, worked example for semantic entropy calculation, discussion of limitations and computational cost of entailment clustering, ablation of entailment prediction and clustering methods, discussion of automated accuracy assessment, unaggregated results for sentence-length generations and further results for short-phrase generations.</p></caption></media></supplementary-material>
</p></sec></sec></body><back><app-group><app id="App1"><sec id="Sec27"><title>Extended data figures and tables</title><p id="Par139">
<fig id="Fig4"><label>Extended Data Fig. 1</label><caption><title>Algorithm outline for bidirectional entailment clustering.</title><p>Given a set of outputs in response to a context, the bidirectional entailment answer returns a set of sets of outputs which have been classified as sharing a meaning.</p></caption><graphic position="anchor" xlink:href="41586_2024_7421_Fig4_ESM" id="d33e2080"/></fig>
</p></sec></app></app-group><fn-group><fn><p><bold>Publisher&#x02019;s note</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></fn><fn><p>These authors contributed equally: Sebastian Farquhar, Jannik Kossen, Lorenz Kuhn</p></fn></fn-group><sec><title>Extended data</title><p>is available for this paper at 10.1038/s41586-024-07421-0.</p></sec><sec><title>Supplementary information</title><p>The online version contains supplementary material available at 10.1038/s41586-024-07421-0.</p></sec><ack><title>Acknowledgements</title><p>We thank G. Irving, K. Perlin, J. Richens, L. Rimell and M. Turpin for their comments or discussion related to this work. We thank K. Handa for his help with the human evaluation of our automated accuracy assessment. We thank F. Bickford Smith and L. Melo for their code review.&#x000a0;Y.G.&#x000a0;is supported by a Turing AI Fellowship funded by the UK government&#x02019;s Office for AI, through UK Research and Innovation (grant reference EP/V030302/1), and delivered by the Alan Turing Institute.</p></ack><notes notes-type="author-contribution"><title>Author contributions</title><p>S.F. led the work from conception to completion and proposed using bidirectional entailment to cluster generations as a way of computing entropy in LLMs. He wrote the main text, most of the Methods and Supplementary Information and prepared most of the figures. J.K. improved the mathematical formalization of semantic entropy; led the extension of semantic entropy to sentence- and paragraph-length generations; wrote the code for, and carried out, all the experiments and evaluations; wrote much of the Methods and Supplementary Information and prepared drafts of many figures; and gave critical feedback on the main text. L.K. developed the initial mathematical formalization of semantic entropy; wrote code for, and carried out, the initial experiments around semantic entropy and its variants which demonstrated the promise of the idea and helped narrow down possible research avenues to explore; and gave critical feedback on the main text. Y.G. ideated the project, proposing the idea to differentiate semantic and syntactic diversity as a tool for detecting hallucinations, provided high-level guidance on the research and gave critical feedback on the main text; he runs the research laboratory in which the work was carried out.</p></notes><notes notes-type="peer-review"><title>Peer review</title><sec id="FPar3"><title>Peer review information</title><p id="Par137"><italic>Nature</italic> thanks Mirella Lapata and the other, anonymous, reviewer(s) for their contribution to the peer review of this work.</p></sec></notes><notes notes-type="data-availability"><title>Data availability</title><p>The data used for the short-phrase and sentence-length generations are publicly available and the released code details how to access it. We release a public version of the FactualBio dataset as part of the code base for reproducing the paragraph-length experiments.</p></notes><notes notes-type="data-availability"><title>Code availability</title><p>We release all code used to produce the main experiments. The code for short-phrase and sentence-length experiments can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/jlko/semantic_uncertainty">github.com/jlko/semantic_uncertainty</ext-link> and 10.5281/zenodo.10964366 (ref. <sup><xref ref-type="bibr" rid="CR65">65</xref></sup>). The code for paragraph-length experiments can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/jlko/long_hallucinations">github.com/jlko/long_hallucinations</ext-link> and 10.5281/zenodo.10964366 (ref. <sup><xref ref-type="bibr" rid="CR65">65</xref></sup>).</p></notes><notes id="FPar4" notes-type="COI-statement"><title>Competing interests</title><p id="Par138">S.F. is currently employed by Google DeepMind and L.K. by OpenAI. For both, this paper was written under their University of Oxford affiliation. The remaining authors declare no competing interests.</p></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><mixed-citation publication-type="other">GPT-4 technical report. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/2303.08774">https://arxiv.org/abs/2303.08774</ext-link> (2023).</mixed-citation></ref><ref id="CR2"><label>2.</label><mixed-citation publication-type="other">Gemini: a family of highly capable multimodal models. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/2312.11805">https://arxiv.org/abs/2312.11805</ext-link> (2023).</mixed-citation></ref><ref id="CR3"><label>3.</label><mixed-citation publication-type="other">Xiao, Y. &#x00026; Wang, W. Y. On hallucination and predictive uncertainty in conditional language generation. In <italic>Proc. 16th Conference of the European Chapter of the Association for Computational Linguistics</italic> 2734&#x02013;2744 (Association for Computational Linguistics, 2021).</mixed-citation></ref><ref id="CR4"><label>4.</label><mixed-citation publication-type="other">Rohrbach, A., Hendricks, L. A., Burns, K., Darrell, T. &#x00026; Saenko, K. Object hallucination in image captioning. In <italic>Proc. 2018 Conference on Empirical Methods in Natural Language Processing</italic> (eds Riloff, E., Chiang, D., Hockenmaier, J. &#x00026; Tsujii, J.) 4035&#x02013;4045 (Association for Computational Linguistics, 2018).</mixed-citation></ref><ref id="CR5"><label>5.</label><mixed-citation publication-type="other">Weiser, B. Lawyer who used ChatGPT faces penalty for made up citations. <italic>The New York Times</italic> (8 Jun 2023).</mixed-citation></ref><ref id="CR6"><label>6.</label><mixed-citation publication-type="other">Opdahl, A. L. et al. Trustworthy journalism through AI. <italic>Data Knowl. Eng</italic>. <bold>146</bold>, 102182 (2023).</mixed-citation></ref><ref id="CR7"><label>7.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shen</surname><given-names>Y</given-names></name><etal/></person-group><article-title>ChatGPT and other large language models are double-edged swords</article-title><source>Radiology</source><year>2023</year><volume>307</volume><fpage>e230163</fpage><pub-id pub-id-type="doi">10.1148/radiol.230163</pub-id><?supplied-pmid 36700838?><pub-id pub-id-type="pmid">36700838</pub-id>
</element-citation></ref><ref id="CR8"><label>8.</label><mixed-citation publication-type="other">Schulman, J. Reinforcement learning from human feedback: progress and challenges. Presented at the Berkeley EECS Colloquium. <italic>YouTube</italic><ext-link ext-link-type="uri" xlink:href="https://www.youtube.com/watch?v=hhiLw5Q_UFg">www.youtube.com/watch?v=hhiLw5Q_UFg</ext-link> (2023).</mixed-citation></ref><ref id="CR9"><label>9.</label><mixed-citation publication-type="other">Ji, Z. et al. Survey of hallucination in natural language generation. <italic>ACM Comput. Surv.</italic><bold>55</bold>, 248 (2023).</mixed-citation></ref><ref id="CR10"><label>10.</label><mixed-citation publication-type="other">Maynez, J., Narayan, S., Bohnet, B. &#x00026; McDonald, R. On faithfulness and factuality in abstractive summarization. In <italic>Proc. 58th Annual Meeting of the Association for Computational Linguistics</italic> (eds Jurafsky, D., Chai, J., Schluter, N. &#x00026; Tetreault, J.) 1906&#x02013;1919 (Association for Computational Linguistics, 2020).</mixed-citation></ref><ref id="CR11"><label>11.</label><mixed-citation publication-type="other">Filippova, K. Controlled hallucinations: learning to generate faithfully from noisy data. In <italic>Findings of the Association for Computational Linguistics: EMNLP 2020</italic> (eds Webber, B., Cohn, T., He, Y. &#x00026; Liu, Y.) 864&#x02013;870 (Association for Computational Linguistics, 2020).</mixed-citation></ref><ref id="CR12"><label>12.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Berrios</surname><given-names>G</given-names></name></person-group><article-title>Confabulations: a conceptual history</article-title><source>J. Hist. Neurosci.</source><year>1998</year><volume>7</volume><fpage>225</fpage><lpage>241</lpage><pub-id pub-id-type="doi">10.1076/jhin.7.3.225.1855</pub-id><?supplied-pmid 11623845?><pub-id pub-id-type="pmid">11623845</pub-id>
</element-citation></ref><ref id="CR13"><label>13.</label><mixed-citation publication-type="other">Lin, S., Hilton, J. &#x00026; Evans, O. Teaching models to express their uncertainty in words. <italic>Transact. Mach. Learn. Res.</italic> (2022).</mixed-citation></ref><ref id="CR14"><label>14.</label><mixed-citation publication-type="other">Evans, O. et al. Truthful AI: developing and governing AI that does not lie. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/2110.06674">https://arxiv.org/abs/2110.06674</ext-link> (2021).</mixed-citation></ref><ref id="CR15"><label>15.</label><mixed-citation publication-type="other">Amodei, D. et al. Concrete problems in AI safety. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1606.06565">https://arxiv.org/abs/1606.06565</ext-link> (2016).</mixed-citation></ref><ref id="CR16"><label>16.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jiang</surname><given-names>Z</given-names></name><name><surname>Araki</surname><given-names>J</given-names></name><name><surname>Ding</surname><given-names>H</given-names></name><name><surname>Neubig</surname><given-names>G</given-names></name></person-group><article-title>How can we know when language models know? On the calibration of language models for question answering</article-title><source>Transact. Assoc. Comput. Linguist.</source><year>2021</year><volume>9</volume><fpage>962</fpage><lpage>977</lpage><pub-id pub-id-type="doi">10.1162/tacl_a_00407</pub-id></element-citation></ref><ref id="CR17"><label>17.</label><mixed-citation publication-type="other">Desai, S. &#x00026; Durrett, G. Calibration of pre-trained transformers. In <italic>Proc. 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP)</italic> (eds Webber, B., Cohn, T., He, Y. &#x00026; Liu, Y.) 295&#x02013;302 (Association for Computational Linguistics, 2020).</mixed-citation></ref><ref id="CR18"><label>18.</label><mixed-citation publication-type="other">Glushkova, T., Zerva, C., Rei, R. &#x00026; Martins, A. F. Uncertainty-aware machine translation evaluation. In <italic>Findings of the Association for Computational Linguistics: EMNLP 2021</italic> (eds Moens, M-F., Huang, X., Specia, L. &#x00026; Yih, S.) 3920&#x02013;3938 (Association for Computational Linguistics, 2021).</mixed-citation></ref><ref id="CR19"><label>19.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>Y</given-names></name><name><surname>Beck</surname><given-names>D</given-names></name><name><surname>Baldwin</surname><given-names>T</given-names></name><name><surname>Verspoor</surname><given-names>K</given-names></name></person-group><article-title>Uncertainty estimation and reduction of pre-trained models for text regression</article-title><source>Transact. Assoc. Comput. Linguist.</source><year>2022</year><volume>10</volume><fpage>680</fpage><lpage>696</lpage><pub-id pub-id-type="doi">10.1162/tacl_a_00483</pub-id></element-citation></ref><ref id="CR20"><label>20.</label><mixed-citation publication-type="other">Baker, S. &#x00026; Kanade, T. Hallucinating faces. In <italic>Proc. Fourth IEEE International Conference on Automatic Face and Gesture Recognition</italic>. 83&#x02013;88 (IEEE, Catalogue no PR00580, 2002).</mixed-citation></ref><ref id="CR21"><label>21.</label><mixed-citation publication-type="other">Eliot, L. AI ethics lucidly questioning this whole hallucinating AI popularized trend that has got to stop. <italic>Forbes Magazine</italic> (24 August 2022).</mixed-citation></ref><ref id="CR22"><label>22.</label><mixed-citation publication-type="other">Shanahan, M. Talking about large language models. <italic>Commun. Assoc. Comp. Machinery</italic><bold>67</bold>, 68&#x02013;79 (2024).</mixed-citation></ref><ref id="CR23"><label>23.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>MacKay</surname><given-names>DJC</given-names></name></person-group><article-title>Information-based objective functions for active data selection</article-title><source>Neural Comput.</source><year>1992</year><volume>4</volume><fpage>590</fpage><lpage>604</lpage><pub-id pub-id-type="doi">10.1162/neco.1992.4.4.590</pub-id></element-citation></ref><ref id="CR24"><label>24.</label><mixed-citation publication-type="other">Kadavath, S. et al. Language models (mostly) know what they know. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/2207.05221">https://arxiv.org/abs/2207.05221</ext-link> (2022).</mixed-citation></ref><ref id="CR25"><label>25.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lindley</surname><given-names>DV</given-names></name></person-group><article-title>On a measure of the information provided by an experiment</article-title><source>Ann. Math. Stat.</source><year>1956</year><volume>27</volume><fpage>986</fpage><lpage>1005</lpage><pub-id pub-id-type="doi">10.1214/aoms/1177728069</pub-id></element-citation></ref><ref id="CR26"><label>26.</label><mixed-citation publication-type="other">Xiao, T. Z., Gomez, A. N. &#x00026; Gal, Y. Wat zei je? Detecting out-of-distribution translations with variational transformers. In <italic>Workshop on Bayesian Deep Learning at the Conference on Neural Information Processing Systems</italic> (NeurIPS, Vancouver, 2019).</mixed-citation></ref><ref id="CR27"><label>27.</label><mixed-citation publication-type="other">Christiano, P., Cotra, A. &#x00026; Xu, M. <italic>Eliciting Latent Knowledge</italic> (Alignment Research Center, 2021); <ext-link ext-link-type="uri" xlink:href="https://docs.google.com/document/d/1WwsnJQstPq91_Yh-Ch2XRL8H_EpsnjrC1dwZXR37PC8/edit">https://docs.google.com/document/d/1WwsnJQstPq91_Yh-Ch2XRL8H_EpsnjrC1dwZXR37PC8/edit</ext-link>.</mixed-citation></ref><ref id="CR28"><label>28.</label><mixed-citation publication-type="other">Negri, M., Bentivogli, L., Mehdad, Y., Giampiccolo, D. &#x00026; Marchetti, A. Divide and conquer: crowdsourcing the creation of cross-lingual textual entailment corpora. In <italic>Proc. 2011 Conference on Empirical Methods in Natural Language Processing</italic> 670&#x02013;679 (Association for Computational Linguistics, 2011).</mixed-citation></ref><ref id="CR29"><label>29.</label><mixed-citation publication-type="other">Honovich, O. et al. TRUE: Re-evaluating factual consistency evaluation. In <italic>Proc. Second DialDoc Workshop on Document-grounded Dialogue and Conversational Question Answering</italic> 161&#x02013;175 (Association for Computational Linguistics, 2022).</mixed-citation></ref><ref id="CR30"><label>30.</label><mixed-citation publication-type="other">Falke, T., Ribeiro, L. F. R., Utama, P. A., Dagan, I. &#x00026; Gurevych, I. Ranking generated summaries by correctness: an interesting but challenging application for natural language inference. In <italic>Proc. 57th Annual Meeting of the Association for Computational Linguistics</italic> 2214&#x02013;2220 (Association for Computational Linguistics, 2019).</mixed-citation></ref><ref id="CR31"><label>31.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Laban</surname><given-names>P</given-names></name><name><surname>Schnabel</surname><given-names>T</given-names></name><name><surname>Bennett</surname><given-names>PN</given-names></name><name><surname>Hearst</surname><given-names>MA</given-names></name></person-group><article-title>SummaC: re-visiting NLI-based models for inconsistency detection in summarization</article-title><source>Trans. Assoc. Comput. Linguist.</source><year>2022</year><volume>10</volume><fpage>163</fpage><lpage>177</lpage><pub-id pub-id-type="doi">10.1162/tacl_a_00453</pub-id></element-citation></ref><ref id="CR32"><label>32.</label><mixed-citation publication-type="other">Joshi, M., Choi, E., Weld, D. S. &#x00026; Zettlemoyer, L. TriviaQA: a large scale distantly supervised challenge dataset for reading comprehension. In <italic>Proc. 55th Annual Meeting of the Association for Computational Linguistics</italic> 1601&#x02013;1611 (Association for Computational Linguistics. 2017).</mixed-citation></ref><ref id="CR33"><label>33.</label><mixed-citation publication-type="other">Rajpurkar, P., Zhang, J., Lopyrev, K. &#x00026; Liang, P. SQuAD: 100,000+ questions for machine compression of text. In <italic>Proc. 2016 Conference on Empirical Methods in Natural Language Processing</italic> (eds Su, J., Duh, K. &#x00026; Carreras, X.) 2383&#x02013;2392 (Association for Computational Linguistics, 2016).</mixed-citation></ref><ref id="CR34"><label>34.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tsatsaronis</surname><given-names>G</given-names></name><etal/></person-group><article-title>An overview of the BIOASQ large-scale biomedical semantic indexing and question answering competition</article-title><source>BMC Bioinformatics</source><year>2015</year><volume>16</volume><fpage>138</fpage><pub-id pub-id-type="doi">10.1186/s12859-015-0564-6</pub-id><?supplied-pmid 25925131?><pub-id pub-id-type="pmid">25925131</pub-id>
</element-citation></ref><ref id="CR35"><label>35.</label><mixed-citation publication-type="other">Lee, K., Chang, M.-W. &#x00026; Toutanova, K. Latent retrieval for weakly supervised open domain question answering. In <italic>Proc. 57th Annual Meeting of the Association for Computational Linguistics</italic> 6086&#x02013;6096 (Association for Computational Linguistics, 2019).</mixed-citation></ref><ref id="CR36"><label>36.</label><mixed-citation publication-type="other">Kwiatkowski, T. et al. Natural questions: a benchmark for question answering research. <italic>Transact. Assoc. Comput. Linguist.</italic><bold>7</bold>, 452&#x02013;466 (2019).</mixed-citation></ref><ref id="CR37"><label>37.</label><mixed-citation publication-type="other">Patel, A., Bhattamishra, S. &#x00026; Goyal, N. Are NLP models really able to solve simple math word problems? In <italic>Proc. 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies</italic> (eds Toutanova, K. et al.) 2080&#x02013;2094 (Assoc. Comp. Linguistics, 2021).</mixed-citation></ref><ref id="CR38"><label>38.</label><mixed-citation publication-type="other">Touvron, H. et al. Llama 2: open foundation and fine-tuned chat models. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/2307.09288">https://arxiv.org/abs/2307.09288</ext-link> (2023).</mixed-citation></ref><ref id="CR39"><label>39.</label><mixed-citation publication-type="other">Penedo, G. et al. The RefinedWeb dataset for Falcon LLM: outperforming curated corpora with web data, and web data only. In <italic>Proc. 36th Conference on Neural Information Processing Systems</italic> (eds Oh, A. et al.) 79155&#x02013;79172 (Curran Associates, 2023)</mixed-citation></ref><ref id="CR40"><label>40.</label><mixed-citation publication-type="other">Jiang, A. Q. et al. Mistral 7B. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/2310.06825">https://arxiv.org/abs/2310.06825</ext-link> (2023).</mixed-citation></ref><ref id="CR41"><label>41.</label><mixed-citation publication-type="other">Manakul, P., Liusie, A. &#x00026; Gales, M. J. F. SelfCheckGPT: Zero-Resource Black-Box hallucination detection for generative large language models. In <italic>Findings of the Association for Computational Linguistics: EMNLP 2023</italic> (eds Bouamor, H., Pino, J. &#x00026; Bali, K.) 9004&#x02013;9017 (Assoc. Comp. Linguistics, 2023).</mixed-citation></ref><ref id="CR42"><label>42.</label><mixed-citation publication-type="other">Mukhoti, J., Kirsch, A., van Amersfoort, J., Torr, P. H. &#x00026; Gal, Y. Deep deterministic uncertainty: a new simple baseline. In <italic>IEEE/CVF Conference on Computer Vision and Pattern Recognition</italic> 24384&#x02013;24394 (Computer Vision Foundation, 2023).</mixed-citation></ref><ref id="CR43"><label>43.</label><mixed-citation publication-type="other">Schuster, T., Chen, S., Buthpitiya, S., Fabrikant, A. &#x00026; Metzler, D. Stretching sentence-pair NLI models to reason over long documents and clusters. In <italic>Findings of the Association for Computational Linguistics: EMNLP 2022</italic> (eds Goldberg, Y. et al.) 394&#x02013;412 (Association for Computational Linguistics, 2022).</mixed-citation></ref><ref id="CR44"><label>44.</label><mixed-citation publication-type="other">Barnes, B. &#x00026; Christiano, P. Progress on AI Safety via Debate. <italic>AI Alignment Forum</italic><ext-link ext-link-type="uri" xlink:href="http://www.alignmentforum.org/posts/Br4xDbYu4Frwrb64a/writeup-progress-on-ai-safety-via-debate-1">www.alignmentforum.org/posts/Br4xDbYu4Frwrb64a/writeup-progress-on-ai-safety-via-debate-1</ext-link> (2020).</mixed-citation></ref><ref id="CR45"><label>45.</label><mixed-citation publication-type="other">Irving, G., Christiano, P. &#x00026; Amodei, D. AI safety via debate. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1805.00899">https://arxiv.org/abs/1805.00899</ext-link> (2018).</mixed-citation></ref><ref id="CR46"><label>46.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Der Kiureghian</surname><given-names>A</given-names></name><name><surname>Ditlevsen</surname><given-names>O</given-names></name></person-group><article-title>Aleatory or epistemic? Does it matter?</article-title><source>Struct. Saf.</source><year>2009</year><volume>31</volume><fpage>105</fpage><lpage>112</lpage><pub-id pub-id-type="doi">10.1016/j.strusafe.2008.06.020</pub-id></element-citation></ref><ref id="CR47"><label>47.</label><mixed-citation publication-type="other">Malinin, A. &#x00026; Gales, M. Uncertainty estimation in autoregressive structured prediction. In <italic>Proceedings of the International Conference on Learning Representations</italic><ext-link ext-link-type="uri" xlink:href="https://openreview.net/forum?id=jN5y-zb5Q7m">https://openreview.net/forum?id=jN5y-zb5Q7m</ext-link> (2021).</mixed-citation></ref><ref id="CR48"><label>48.</label><mixed-citation publication-type="other">Murray, K. &#x00026; Chiang, D. Correcting length bias in neural machine translation. In <italic>Proc. Third Conference on Machine Translation</italic> (eds Bojar, O. et al.) 212&#x02013;223 (Assoc. Comp. Linguistics, 2018).</mixed-citation></ref><ref id="CR49"><label>49.</label><mixed-citation publication-type="other">Holtzman, A., Buys, J., Du, L., Forbes, M. &#x00026; Choi, Y. The curious case of neural text degeneration. In <italic>Proceedings of the International Conference on Learning Representations</italic><ext-link ext-link-type="uri" xlink:href="https://openreview.net/forum?id=rygGQyrFvH">https://openreview.net/forum?id=rygGQyrFvH</ext-link> (2020).</mixed-citation></ref><ref id="CR50"><label>50.</label><mixed-citation publication-type="other">Fan, A., Lewis, M. &#x00026; Dauphin, Y. Hierarchical neural story generation. In <italic>Proc. 56th Annual Meeting of the Association for Computational Linguistics</italic> (eds Gurevych, I. &#x00026; Miyao, Y.) 889&#x02013;898 (Association for Computational Linguistics, 2018).</mixed-citation></ref><ref id="CR51"><label>51.</label><mixed-citation publication-type="other">Speaks, J. in <italic>The Stanford Encyclopedia of Philosophy</italic> (ed. Zalta, E. N.) (Metaphysics Research Lab, Stanford Univ., 2021).</mixed-citation></ref><ref id="CR52"><label>52.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Culicover</surname><given-names>PW</given-names></name></person-group><article-title>Paraphrase generation and information retrieval from stored text</article-title><source>Mech. Transl. Comput. Linguist.</source><year>1968</year><volume>11</volume><fpage>78</fpage><lpage>88</lpage></element-citation></ref><ref id="CR53"><label>53.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pad&#x000f3;</surname><given-names>S</given-names></name><name><surname>Cer</surname><given-names>D</given-names></name><name><surname>Galley</surname><given-names>M</given-names></name><name><surname>Jurafsky</surname><given-names>D</given-names></name><name><surname>Manning</surname><given-names>CD</given-names></name></person-group><article-title>Measuring machine translation quality as semantic equivalence: a metric based on entailment features</article-title><source>Mach. Transl.</source><year>2009</year><volume>23</volume><fpage>181</fpage><lpage>193</lpage><pub-id pub-id-type="doi">10.1007/s10590-009-9060-y</pub-id></element-citation></ref><ref id="CR54"><label>54.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Androutsopoulos</surname><given-names>I</given-names></name><name><surname>Malakasiotis</surname><given-names>P</given-names></name></person-group><article-title>A survey of paraphrasing and textual entailment methods</article-title><source>J. Artif. Intell. Res.</source><year>2010</year><volume>38</volume><fpage>135</fpage><lpage>187</lpage><pub-id pub-id-type="doi">10.1613/jair.2985</pub-id></element-citation></ref><ref id="CR55"><label>55.</label><mixed-citation publication-type="other">MacCartney, B. <italic>Natural Language Inference</italic> (Stanford Univ., 2009).</mixed-citation></ref><ref id="CR56"><label>56.</label><mixed-citation publication-type="other">He, P., Liu, X., Gao, J. &#x00026; Chen, W. Deberta: decoding-enhanced BERT with disentangled attention. In <italic>International Conference on Learning Representations</italic><ext-link ext-link-type="uri" xlink:href="https://openreview.net/forum?id=XPZIaotutsD">https://openreview.net/forum?id=XPZIaotutsD</ext-link> (2021).</mixed-citation></ref><ref id="CR57"><label>57.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Brown</surname><given-names>T</given-names></name><etal/></person-group><article-title>Language models are few-shot learners</article-title><source>Adv. Neural Inf. Process. Syst.</source><year>2020</year><volume>33</volume><fpage>1877</fpage><lpage>1901</lpage></element-citation></ref><ref id="CR58"><label>58.</label><mixed-citation publication-type="other">Williams, A., Nangia, N. &#x00026; Bowman, S. R. A broad-coverage challenge corpus for sentence understanding through inference. In <italic>Proc. 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies</italic> (eds Walker, M. et al.) 1112&#x02013;1122 (Assoc. Comp. Linguistics, 2018).</mixed-citation></ref><ref id="CR59"><label>59.</label><mixed-citation publication-type="other">Yu, L., Hermann, K. M., Blunsom, P. &#x00026; Pulman, S. Deep learning for answer sentence selection. Preprint at <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1412.1632">https://arxiv.org/abs/1412.1632</ext-link> (2014).</mixed-citation></ref><ref id="CR60"><label>60.</label><mixed-citation publication-type="other">Socher, R., Huang, E., Pennin, J., Manning, C. D. &#x00026; Ng, A. Dynamic pooling and unfolding recursive autoencoders for paraphrase detection. In <italic>Proceedings of the 24th Conference on Neural Information Processing Systems</italic> (eds Shawe-Taylor, J. et al.) (2011)</mixed-citation></ref><ref id="CR61"><label>61.</label><mixed-citation publication-type="other">He, R., Ravula, A., Kanagal, B. &#x00026; Ainslie, J. Realformer: Transformer likes residual attention. In <italic>Findings of the Association for Computational Linguistics: ACL-IJCNLP 2021</italic> (eds Zhong, C., et al.) 929&#x02013;943 (Assoc. Comp. Linguistics, 2021).</mixed-citation></ref><ref id="CR62"><label>62.</label><mixed-citation publication-type="other">Tay, Y. et al. Charformer: fast character transformers via gradient-based subword tokenization. In <italic>Proceedings of the International Conference on Learning Representations</italic><ext-link ext-link-type="uri" xlink:href="https://openreview.net/forum?id=JtBRnrlOEFN">https://openreview.net/forum?id=JtBRnrlOEFN</ext-link> (2022).</mixed-citation></ref><ref id="CR63"><label>63.</label><mixed-citation publication-type="other">Kane, H., Kocyigit, Y., Abdalla, A., Ajanoh, P. &#x00026; Coulibali, M. Towards neural similarity evaluators. In <italic>Workshop on Document Intelligence at the 32nd conference on Neural Information Processing</italic> (2019).</mixed-citation></ref><ref id="CR64"><label>64.</label><mixed-citation publication-type="other">Lebret, R., Grangier, D. &#x00026; Auli, M. Neural text generation from structured data with application to the biography domain. In <italic>Proc. 2016 Conference on Empirical Methods in Natural Language Processing</italic> (eds Su, J. et al.) 1203&#x02013;1213 (Association for Computational Linguistics, 2016).</mixed-citation></ref><ref id="CR65"><label>65.</label><mixed-citation publication-type="other">Kossen, J., jlko/semantic_uncertainty: Initial release v.1.0.0. <italic>Zenodo</italic>10.5281/zenodo.10964366 (2024).</mixed-citation></ref></ref-list></back></article>